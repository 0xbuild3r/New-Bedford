syntax = "proto3";

package new_bedford;

option java_multiple_files = true;
option java_package = "llc.goldenagetechnologies.newbedford";
option java_outer_classname = "TxManagerProto";

message LiquidateRequest {
  // Can send multiple liquidation candidates at once
  repeated LiquidationCandidate candidates = 1;
}

message LiquidateReply {
  // Success signalled by gRPC status code
}

message LiquidationCandidate {
  // Token prices, signatures, and messages (from Coinbase) corresponding to the ones that were used to determine liquidatability
  repeated TransactionTokenData tokens = 1;
  // Profitability (to determine maximum allowed transaction fee)
  string expectedRevenue = 2;
  // Candidate address
  string candidateAddress = 3;
  // Address of cToken to repay
  string repayTokenAddress = 4;
  // Address of cToken to seize
  string seizeTokenAddress = 5;
}

message TransactionTokenData {
  // An instance of token data, signature, and message (from Coinbase) corresponding to the ones that were used to determine liquidatability
  string symbol = 1; // Ticker (BAT, USDC, etc)
  string signature = 2;
  string message = 3;
}

message CancelCandidateRequest {
  repeated string addresses = 1;
}

message CancelCandidateReply {
  // Success signalled by gRPC status code
}

service TxManager {
  // Send the candidates in bulk. If multiple queries come in, the service will be able to update it's parameters.
  rpc submitCandidates (stream LiquidateRequest) returns (LiquidateReply) {}
  // Also send liquidatability falling-edge, transitions from liquidatable -> not liquidatable.
  // (Usually from someone else liquidating, possibly from other events)
  rpc cancelCandidates (stream CancelCandidateRequest) returns (CancelCandidateReply) {}
}